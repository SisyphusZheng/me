[
  {
    "id": "routes/blog/[slug].tsx",
    "title": "[slug]",
    "url": "/blog/[slug]",
    "type": "blog",
    "text": "[slug] import { h } from \"preact\";\r\nimport { Handlers, PageProps } from \"$fresh/server.ts\";\r\nimport Layout from \"../../components/Layout.tsx\";\r\nimport { siteConfig } from \"../../docs/config.ts\";\r\nimport { marked } from \"marked\";\r\nimport { BlogPlugin } from \"../../plugins/blog/mod.ts\";\r\nimport type { BlogPost } from \"../../core/content.ts\";\r\n\r\n// 创建博客插件实例\r\nconst blogPlugin = new BlogPlugin({ postsDir: \"docs/blog\" });\r\n\r\nexport const handler: Handlers<BlogPost> = {\r\n  async GET(req: Request, ctx: any) {\r\n    const slug = ctx.params.slug;\r\n    // 激活插件并获取文章\r\n    await blogPlugin.activate();\r\n    const posts = await blogPlugin.loadPosts();\r\n    const post = posts.find((p) => p.id === slug);\r\n\r\n    if (!post) {\r\n      return ctx.renderNotFound();\r\n    }\r\n\r\n    return ctx.render(post);\r\n  },\r\n};\r\n\r\nexport default function BlogPostPage({ data }: PageProps<BlogPost>) {\r\n  return (\r\n    <Layout>\r\n      <article class=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n        <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden border dark:border-gray-700 p-6\">\r\n          <h1 class=\"text-4xl font-bold mb-4 dark:text-white\">{data.title}</h1>\r\n          <div class=\"text-gray-500 dark:text-gray-300 mb-8\">\r\n            {new Date(data.date || \"\").toLocaleDateString()} ·{\" \"}\r\n            {data.tags?.map((tag) => (\r\n              <span class=\"bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-2 py-1 rounded-full text-sm mr-2\">\r\n                {tag}\r\n              </span>\r\n            ))}\r\n          </div>\r\n          <div\r\n            class=\"prose max-w-none dark:prose-invert\"\r\n            dangerouslySetInnerHTML={{ __html: marked(data.content) }}\r\n          />\r\n        </div>\r\n      </article>\r\n    </Layout>\r\n  );\r\n}\r\n",
    "content": "import { h } from \"preact\";\r\nimport { Handlers, PageProps } from \"$fresh/server.ts\";\r\nimport Layout from \"../../components/Layout.tsx\";\r\nimport { siteConfig } from \"../../docs/config.ts\";\r\nimport { marked } from \"marked\";\r\nimport { BlogPlugin } from \"../../plugins/blog/mod.ts\";\r\nimport type { BlogPost } from \"../../core/content.ts\";\r\n\r\n// 创建博客插件实例\r\nconst blogPlugin = new BlogPlugin({ postsDir: \"docs/blog\" });\r\n\r\nexport const handler: Handlers<BlogPost> = {\r\n  async GET(req: Request, ctx: any) {\r\n    const slug = ctx.params.slug;\r\n    // 激活插件并获取文章\r\n    await blogPlugin.activate();\r\n    const posts = await blogPlugin.loadPosts();\r\n    const post = posts.find((p) => p.id === slug);\r\n\r\n    if (!post) {\r\n      return ctx.renderNotFound();\r\n    }\r\n\r\n    return ctx.render(post);\r\n  },\r\n};\r\n\r\nexport default function BlogPostPage({ data }: PageProps<BlogPost>) {\r\n  return (\r\n    <Layout>\r\n      <article class=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n        <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden border dark:border-gray-700 p-6\">\r\n          <h1 class=\"text-4xl font-bold mb-4 dark:text-white\">{data.title}</h1>\r\n          <div class=\"text-gray-500 dark:text-gray-300 mb-8\">\r\n            {new Date(data.date || \"\").toLocaleDateString()} ·{\" \"}\r\n            {data.tags?.map((tag) => (\r\n              <span class=\"bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-2 py-1 rounded-full text-sm mr-2\">\r\n                {tag}\r\n              </span>\r\n            ))}\r\n          </div>\r\n          <div\r\n            class=\"prose max-w-none dark:prose-invert\"\r\n            dangerouslySetInnerHTML={{ __html: marked(data.content) }}\r\n          />\r\n        </div>\r\n      </article>\r\n    </Layout>\r\n  );\r\n}\r\n",
    "tags": []
  },
  {
    "id": "routes/blog/index.tsx",
    "title": "Blog",
    "url": "/blog/",
    "type": "blog",
    "text": "Blog import { h } from \"preact\";\r\nimport { Handlers } from \"$fresh/server.ts\";\r\nimport Layout from \"../../components/Layout.tsx\";\r\nimport { siteConfig } from \"../../docs/config.ts\";\r\nimport { BlogPlugin } from \"../../plugins/blog/mod.ts\";\r\nimport type { BlogPost } from \"../../core/content.ts\";\r\nimport { I18nPlugin, i18nPlugin, t } from \"../../plugins/i18n/mod.ts\";\r\nimport { type Locale } from \"../../docs/content.ts\";\r\n\r\n// 创建博客插件实例\r\nconst blogPlugin = new BlogPlugin({ postsDir: \"docs/blog\" });\r\n\r\n// 日期格式化函数\r\nconst formatDate = (dateString: string, locale: string) => {\r\n  try {\r\n    return new Date(dateString).toLocaleDateString(\r\n      locale === \"zh-CN\" ? \"zh-CN\" : \"en-US\",\r\n      { year: \"numeric\", month: \"long\", day: \"numeric\" }\r\n    );\r\n  } catch (e) {\r\n    return dateString;\r\n  }\r\n};\r\n\r\n// 定义BlogPage的数据接口\r\ninterface BlogPageData {\r\n  posts: BlogPost[];\r\n  locale: string;\r\n  translations: Record<string, any>;\r\n}\r\n\r\nexport const handler: Handlers<BlogPageData> = {\r\n  async GET(req: Request, ctx: any) {\r\n    // 从URL获取语言参数\r\n    const url = new URL(req.url);\r\n    const langParam = url.searchParams.get(\"lang\");\r\n\r\n    const locale =\r\n      langParam === \"zh-CN\" || langParam === \"en-US\"\r\n        ? (langParam as Locale)\r\n        : \"en-US\";\r\n\r\n    // 确保i18n插件已激活\r\n    if (!i18nPlugin.initialized) {\r\n      await i18nPlugin.activate();\r\n    }\r\n\r\n    // 设置i18n插件的当前语言\r\n    i18nPlugin.setLocale(locale);\r\n    console.log(`[Blog] 当前语言已设置为: ${i18nPlugin.getLocale()}`);\r\n\r\n    // 确保翻译已加载\r\n    await i18nPlugin.waitForTranslations();\r\n    console.log(`[Blog] 已加载翻译`);\r\n\r\n    // 获取所有翻译\r\n    const translations = i18nPlugin.getTranslations();\r\n    console.log(`[Blog] 已加载翻译语言:`, Object.keys(translations));\r\n\r\n    // 强制加载当前语言\r\n    await i18nPlugin.forceLoadLanguage(locale);\r\n\r\n    // 激活插件并获取博客文章\r\n    await blogPlugin.activate();\r\n    const posts = await blogPlugin.loadPosts();\r\n    console.log(`[Blog] 加载了 ${posts.length} 篇博客文章`);\r\n\r\n    // 返回数据包含博客文章和翻译\r\n    return ctx.render({\r\n      posts,\r\n      locale,\r\n      translations,\r\n    });\r\n  },\r\n};\r\n\r\nexport default function BlogIndex({ data }: { data: BlogPageData }) {\r\n  // 获取当前语言设置\r\n  const locale = data.locale;\r\n  const posts = data.posts;\r\n\r\n  // 注入翻译数据到全局对象\r\n  if (typeof window !== \"undefined\" && data.translations) {\r\n    console.log(`[Blog] 向全局注入翻译数据，当前语言: ${locale}`);\r\n    window.__translations = data.translations;\r\n    window.__currentLocale = locale || \"en-US\";\r\n\r\n    // 测试全局翻译\r\n    setTimeout(() => {\r\n      console.log(\r\n        `[Blog] 导航翻译测试: 首页=`,\r\n        window.__t ? window.__t(\"nav.home\") : \"全局翻译函数不存在\"\r\n      );\r\n    }, 100);\r\n  }\r\n\r\n  // 硬编码翻译\r\n  const translations = {\r\n    \"en-US\": {\r\n      title: \"Blog\",\r\n      description: \"Latest articles and updates\",\r\n      readMore: \"Read more\",\r\n    },\r\n    \"zh-CN\": {\r\n      title: \"博客\",\r\n      description: \"最新文章和更新\",\r\n      readMore: \"阅读更多\",\r\n    },\r\n  };\r\n\r\n  const lang = locale === \"zh-CN\" ? \"zh-CN\" : \"en-US\";\r\n\r\n  return (\r\n    <Layout locale={locale}>\r\n      <div class=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n        <h1 class=\"text-4xl font-bold mb-8 dark:text-white\">\r\n          {translations[lang].title}\r\n        </h1>\r\n        <p class=\"text-xl text-gray-600 dark:text-gray-300 mb-8\">\r\n          {translations[lang].description}\r\n        </p>\r\n\r\n        <div class=\"space-y-8\">\r\n          {posts && posts.length > 0 ? (\r\n            posts.map((post) => (\r\n              <article class=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md\">\r\n                <h2 class=\"text-2xl font-bold mb-2\">\r\n                  <a\r\n                    href={`/blog/${post.id}`}\r\n                    class=\"text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors\"\r\n                  >\r\n                    {post.title}\r\n                  </a>\r\n                </h2>\r\n                <div class=\"text-gray-500 dark:text-gray-400 mb-4\">\r\n                  {formatDate(post.date || \"\", locale)} ·{\" \"}\r\n                  {post.tags?.map((tag) => (\r\n                    <span class=\"bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-2 py-1 rounded-full text-sm mr-2\">\r\n                      {tag}\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n                <p class=\"text-gray-600 dark:text-gray-300\">\r\n                  {post.description}\r\n                </p>\r\n                <a\r\n                  href={`/blog/${post.id}`}\r\n                  class=\"inline-block mt-4 text-blue-500 dark:text-blue-400 hover:text-blue-600 dark:hover:text-blue-300\"\r\n                >\r\n                  {translations[lang].readMore} →\r\n                </a>\r\n              </article>\r\n            ))\r\n          ) : (\r\n            <p class=\"text-gray-600 dark:text-gray-300\">No blog posts found.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n",
    "content": "import { h } from \"preact\";\r\nimport { Handlers } from \"$fresh/server.ts\";\r\nimport Layout from \"../../components/Layout.tsx\";\r\nimport { siteConfig } from \"../../docs/config.ts\";\r\nimport { BlogPlugin } from \"../../plugins/blog/mod.ts\";\r\nimport type { BlogPost } from \"../../core/content.ts\";\r\nimport { I18nPlugin, i18nPlugin, t } from \"../../plugins/i18n/mod.ts\";\r\nimport { type Locale } from \"../../docs/content.ts\";\r\n\r\n// 创建博客插件实例\r\nconst blogPlugin = new BlogPlugin({ postsDir: \"docs/blog\" });\r\n\r\n// 日期格式化函数\r\nconst formatDate = (dateString: string, locale: string) => {\r\n  try {\r\n    return new Date(dateString).toLocaleDateString(\r\n      locale === \"zh-CN\" ? \"zh-CN\" : \"en-US\",\r\n      { year: \"numeric\", month: \"long\", day: \"numeric\" }\r\n    );\r\n  } catch (e) {\r\n    return dateString;\r\n  }\r\n};\r\n\r\n// 定义BlogPage的数据接口\r\ninterface BlogPageData {\r\n  posts: BlogPost[];\r\n  locale: string;\r\n  translations: Record<string, any>;\r\n}\r\n\r\nexport const handler: Handlers<BlogPageData> = {\r\n  async GET(req: Request, ctx: any) {\r\n    // 从URL获取语言参数\r\n    const url = new URL(req.url);\r\n    const langParam = url.searchParams.get(\"lang\");\r\n\r\n    const locale =\r\n      langParam === \"zh-CN\" || langParam === \"en-US\"\r\n        ? (langParam as Locale)\r\n        : \"en-US\";\r\n\r\n    // 确保i18n插件已激活\r\n    if (!i18nPlugin.initialized) {\r\n      await i18nPlugin.activate();\r\n    }\r\n\r\n    // 设置i18n插件的当前语言\r\n    i18nPlugin.setLocale(locale);\r\n    console.log(`[Blog] 当前语言已设置为: ${i18nPlugin.getLocale()}`);\r\n\r\n    // 确保翻译已加载\r\n    await i18nPlugin.waitForTranslations();\r\n    console.log(`[Blog] 已加载翻译`);\r\n\r\n    // 获取所有翻译\r\n    const translations = i18nPlugin.getTranslations();\r\n    console.log(`[Blog] 已加载翻译语言:`, Object.keys(translations));\r\n\r\n    // 强制加载当前语言\r\n    await i18nPlugin.forceLoadLanguage(locale);\r\n\r\n    // 激活插件并获取博客文章\r\n    await blogPlugin.activate();\r\n    const posts = await blogPlugin.loadPosts();\r\n    console.log(`[Blog] 加载了 ${posts.length} 篇博客文章`);\r\n\r\n    // 返回数据包含博客文章和翻译\r\n    return ctx.render({\r\n      posts,\r\n      locale,\r\n      translations,\r\n    });\r\n  },\r\n};\r\n\r\nexport default function BlogIndex({ data }: { data: BlogPageData }) {\r\n  // 获取当前语言设置\r\n  const locale = data.locale;\r\n  const posts = data.posts;\r\n\r\n  // 注入翻译数据到全局对象\r\n  if (typeof window !== \"undefined\" && data.translations) {\r\n    console.log(`[Blog] 向全局注入翻译数据，当前语言: ${locale}`);\r\n    window.__translations = data.translations;\r\n    window.__currentLocale = locale || \"en-US\";\r\n\r\n    // 测试全局翻译\r\n    setTimeout(() => {\r\n      console.log(\r\n        `[Blog] 导航翻译测试: 首页=`,\r\n        window.__t ? window.__t(\"nav.home\") : \"全局翻译函数不存在\"\r\n      );\r\n    }, 100);\r\n  }\r\n\r\n  // 硬编码翻译\r\n  const translations = {\r\n    \"en-US\": {\r\n      title: \"Blog\",\r\n      description: \"Latest articles and updates\",\r\n      readMore: \"Read more\",\r\n    },\r\n    \"zh-CN\": {\r\n      title: \"博客\",\r\n      description: \"最新文章和更新\",\r\n      readMore: \"阅读更多\",\r\n    },\r\n  };\r\n\r\n  const lang = locale === \"zh-CN\" ? \"zh-CN\" : \"en-US\";\r\n\r\n  return (\r\n    <Layout locale={locale}>\r\n      <div class=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n        <h1 class=\"text-4xl font-bold mb-8 dark:text-white\">\r\n          {translations[lang].title}\r\n        </h1>\r\n        <p class=\"text-xl text-gray-600 dark:text-gray-300 mb-8\">\r\n          {translations[lang].description}\r\n        </p>\r\n\r\n        <div class=\"space-y-8\">\r\n          {posts && posts.length > 0 ? (\r\n            posts.map((post) => (\r\n              <article class=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md\">\r\n                <h2 class=\"text-2xl font-bold mb-2\">\r\n                  <a\r\n                    href={`/blog/${post.id}`}\r\n                    class=\"text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors\"\r\n                  >\r\n                    {post.title}\r\n                  </a>\r\n                </h2>\r\n                <div class=\"text-gray-500 dark:text-gray-400 mb-4\">\r\n                  {formatDate(post.date || \"\", locale)} ·{\" \"}\r\n                  {post.tags?.map((tag) => (\r\n                    <span class=\"bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-2 py-1 rounded-full text-sm mr-2\">\r\n                      {tag}\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n                <p class=\"text-gray-600 dark:text-gray-300\">\r\n                  {post.description}\r\n                </p>\r\n                <a\r\n                  href={`/blog/${post.id}`}\r\n                  class=\"inline-block mt-4 text-blue-500 dark:text-blue-400 hover:text-blue-600 dark:hover:text-blue-300\"\r\n                >\r\n                  {translations[lang].readMore} →\r\n                </a>\r\n              </article>\r\n            ))\r\n          ) : (\r\n            <p class=\"text-gray-600 dark:text-gray-300\">No blog posts found.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n",
    "tags": []
  },
  {
    "id": "routes/projects/[slug].tsx",
    "title": "[slug]",
    "url": "routes/projects/[slug]",
    "type": "page",
    "text": "[slug] import { Handlers } from \"$fresh/server.ts\";\r\nimport Layout from \"../../components/Layout.tsx\";\r\nimport Markdown from \"../../components/Markdown.tsx\";\r\nimport {\r\n  getProjectById as getProjectBySlug,\r\n  Project,\r\n} from \"../../plugins/projects/mod.ts\";\r\n\r\nexport const handler: Handlers<Project | null> = {\r\n  async GET(_req, ctx) {\r\n    const slug = ctx.params.slug;\r\n    const project = await getProjectBySlug(slug);\r\n\r\n    if (!project) {\r\n      return ctx.renderNotFound();\r\n    }\r\n\r\n    return ctx.render(project);\r\n  },\r\n};\r\n\r\nexport default function ProjectDetail({ data }: { data: Project }) {\r\n  if (!data) {\r\n    return (\r\n      <Layout>\r\n        <div class=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n          <h1 class=\"text-4xl font-bold mb-8\">项目未找到</h1>\r\n          <p class=\"text-gray-600\">抱歉，您访问的项目不存在。</p>\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <div class=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n        <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden border dark:border-gray-700\">\r\n          <div class=\"p-6 grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n            <div class=\"md:col-span-2\">\r\n              <h1 class=\"text-3xl font-bold mb-4 dark:text-white\">\r\n                {data.title}\r\n              </h1>\r\n              <p class=\"text-gray-600 dark:text-gray-300 mb-6\">\r\n                {data.description}\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"p-6 border-t border-gray-200 dark:border-gray-700\">\r\n            {data.demoUrl && (\r\n              <div class=\"mb-8\">\r\n                <h2 class=\"text-2xl font-bold mb-4 dark:text-white\">\r\n                  网站完整预览\r\n                </h2>\r\n                <div class=\"w-full h-[480px] relative border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden shadow-md\">\r\n                  <iframe\r\n                    src={data.demoUrl}\r\n                    class=\"absolute top-0 left-0 w-full h-full\"\r\n                    title={`${data.title} 完整预览`}\r\n                    loading=\"lazy\"\r\n                    sandbox=\"allow-scripts allow-same-origin\"\r\n                  ></iframe>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div class=\"mb-8 grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n              <div>\r\n                <h2 class=\"text-2xl font-bold mb-4 dark:text-white\">技术栈</h2>\r\n                <div class=\"flex flex-wrap gap-2 mb-4\">\r\n                  {data.technologies &&\r\n                    data.technologies.map((tech) => (\r\n                      <span class=\"bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-3 py-1 rounded-full text-sm\">\r\n                        {tech}\r\n                      </span>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <h2 class=\"text-2xl font-bold mb-4 dark:text-white\">链接</h2>\r\n                <div class=\"flex flex-wrap gap-3\">\r\n                  {data.githubUrl && (\r\n                    <a\r\n                      href={data.githubUrl}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      class=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-gray-900 hover:bg-gray-800 dark:bg-gray-700 dark:hover:bg-gray-600 transition-colors\"\r\n                    >\r\n                      <svg\r\n                        class=\"w-5 h-5 mr-2\"\r\n                        fill=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" />\r\n                      </svg>\r\n                      查看源码\r\n                    </a>\r\n                  )}\r\n                  {data.demoUrl && (\r\n                    <a\r\n                      href={data.demoUrl}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      class=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 transition-colors\"\r\n                    >\r\n                      <svg\r\n                        class=\"w-5 h-5 mr-2\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          stroke-linecap=\"round\"\r\n                          stroke-linejoin=\"round\"\r\n                          stroke-width=\"2\"\r\n                          d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"\r\n                        />\r\n                      </svg>\r\n                      在线演示\r\n                    </a>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <h2 class=\"text-2xl font-bold mb-4 dark:text-white\">项目特点</h2>\r\n            <ul class=\"list-disc list-inside mb-6\">\r\n              {data.features &&\r\n                data.features.map((feature) => (\r\n                  <li class=\"text-gray-600 dark:text-gray-300 mb-2\">\r\n                    {feature}\r\n                  </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <h2 class=\"text-2xl font-bold mb-4 dark:text-white\">项目详情</h2>\r\n            {data.longDescription ? (\r\n              <Markdown content={data.longDescription} />\r\n            ) : (\r\n              <p class=\"text-gray-600 dark:text-gray-300\">暂无详细描述</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n",
    "content": "import { Handlers } from \"$fresh/server.ts\";\r\nimport Layout from \"../../components/Layout.tsx\";\r\nimport Markdown from \"../../components/Markdown.tsx\";\r\nimport {\r\n  getProjectById as getProjectBySlug,\r\n  Project,\r\n} from \"../../plugins/projects/mod.ts\";\r\n\r\nexport const handler: Handlers<Project | null> = {\r\n  async GET(_req, ctx) {\r\n    const slug = ctx.params.slug;\r\n    const project = await getProjectBySlug(slug);\r\n\r\n    if (!project) {\r\n      return ctx.renderNotFound();\r\n    }\r\n\r\n    return ctx.render(project);\r\n  },\r\n};\r\n\r\nexport default function ProjectDetail({ data }: { data: Project }) {\r\n  if (!data) {\r\n    return (\r\n      <Layout>\r\n        <div class=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n          <h1 class=\"text-4xl font-bold mb-8\">项目未找到</h1>\r\n          <p class=\"text-gray-600\">抱歉，您访问的项目不存在。</p>\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <div class=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n        <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden border dark:border-gray-700\">\r\n          <div class=\"p-6 grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n            <div class=\"md:col-span-2\">\r\n              <h1 class=\"text-3xl font-bold mb-4 dark:text-white\">\r\n                {data.title}\r\n              </h1>\r\n              <p class=\"text-gray-600 dark:text-gray-300 mb-6\">\r\n                {data.description}\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"p-6 border-t border-gray-200 dark:border-gray-700\">\r\n            {data.demoUrl && (\r\n              <div class=\"mb-8\">\r\n                <h2 class=\"text-2xl font-bold mb-4 dark:text-white\">\r\n                  网站完整预览\r\n                </h2>\r\n                <div class=\"w-full h-[480px] relative border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden shadow-md\">\r\n                  <iframe\r\n                    src={data.demoUrl}\r\n                    class=\"absolute top-0 left-0 w-full h-full\"\r\n                    title={`${data.title} 完整预览`}\r\n                    loading=\"lazy\"\r\n                    sandbox=\"allow-scripts allow-same-origin\"\r\n                  ></iframe>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div class=\"mb-8 grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n              <div>\r\n                <h2 class=\"text-2xl font-bold mb-4 dark:text-white\">技术栈</h2>\r\n                <div class=\"flex flex-wrap gap-2 mb-4\">\r\n                  {data.technologies &&\r\n                    data.technologies.map((tech) => (\r\n                      <span class=\"bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-3 py-1 rounded-full text-sm\">\r\n                        {tech}\r\n                      </span>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <h2 class=\"text-2xl font-bold mb-4 dark:text-white\">链接</h2>\r\n                <div class=\"flex flex-wrap gap-3\">\r\n                  {data.githubUrl && (\r\n                    <a\r\n                      href={data.githubUrl}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      class=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-gray-900 hover:bg-gray-800 dark:bg-gray-700 dark:hover:bg-gray-600 transition-colors\"\r\n                    >\r\n                      <svg\r\n                        class=\"w-5 h-5 mr-2\"\r\n                        fill=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" />\r\n                      </svg>\r\n                      查看源码\r\n                    </a>\r\n                  )}\r\n                  {data.demoUrl && (\r\n                    <a\r\n                      href={data.demoUrl}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      class=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 transition-colors\"\r\n                    >\r\n                      <svg\r\n                        class=\"w-5 h-5 mr-2\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          stroke-linecap=\"round\"\r\n                          stroke-linejoin=\"round\"\r\n                          stroke-width=\"2\"\r\n                          d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"\r\n                        />\r\n                      </svg>\r\n                      在线演示\r\n                    </a>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <h2 class=\"text-2xl font-bold mb-4 dark:text-white\">项目特点</h2>\r\n            <ul class=\"list-disc list-inside mb-6\">\r\n              {data.features &&\r\n                data.features.map((feature) => (\r\n                  <li class=\"text-gray-600 dark:text-gray-300 mb-2\">\r\n                    {feature}\r\n                  </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <h2 class=\"text-2xl font-bold mb-4 dark:text-white\">项目详情</h2>\r\n            {data.longDescription ? (\r\n              <Markdown content={data.longDescription} />\r\n            ) : (\r\n              <p class=\"text-gray-600 dark:text-gray-300\">暂无详细描述</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n",
    "tags": []
  },
  {
    "id": "routes/projects/index.tsx",
    "title": "index",
    "url": "routes/projects/",
    "type": "page",
    "text": "index import { Handlers, PageProps } from \"$fresh/server.ts\";\r\nimport Layout from \"../../components/Layout.tsx\";\r\nimport { type Project, getProjects } from \"../../plugins/projects/mod.ts\";\r\nimport {\r\n  t,\r\n  currentLocale,\r\n  type Locale,\r\n  i18nPlugin,\r\n} from \"../../plugins/i18n/mod.ts\";\r\n\r\ninterface ProjectsPageData {\r\n  projects: Project[];\r\n  locale: string;\r\n  translations: Record<string, Record<string, string>>;\r\n}\r\n\r\nexport const handler: Handlers = {\r\n  async GET(req: Request, ctx) {\r\n    // 从URL获取语言参数\r\n    const url = new URL(req.url);\r\n    const langParam = url.searchParams.get(\"lang\");\r\n    const locale =\r\n      langParam === \"zh-CN\" || langParam === \"en-US\"\r\n        ? (langParam as Locale)\r\n        : (\"en-US\" as Locale);\r\n\r\n    // 设置当前语言\r\n    currentLocale.value = locale;\r\n\r\n    // 确保i18n插件激活并加载翻译\r\n    if (!i18nPlugin.isActive) {\r\n      await i18nPlugin.activate();\r\n    }\r\n\r\n    // 等待翻译加载完成\r\n    await i18nPlugin.forceLoadLanguage(locale);\r\n\r\n    // 获取项目列表\r\n    const projects = await getProjects();\r\n\r\n    // 获取当前语言的翻译数据\r\n    const translations = i18nPlugin.getTranslations();\r\n\r\n    // 返回带有翻译数据的上下文\r\n    return ctx.render({\r\n      projects,\r\n      locale,\r\n      translations,\r\n    });\r\n  },\r\n};\r\n\r\nexport default function Projects({ data }: PageProps<ProjectsPageData>) {\r\n  // 将翻译数据注入全局对象\r\n  if (typeof window !== \"undefined\" && data.translations) {\r\n    console.log(\r\n      \"Projects页面: 将翻译数据注入到全局对象\",\r\n      Object.keys(data.translations).length,\r\n      \"个语言\"\r\n    );\r\n    window.__translations = data.translations;\r\n\r\n    // 测试全局翻译功能\r\n    setTimeout(() => {\r\n      console.log(\r\n        \"Projects页面翻译测试:\",\r\n        t(\"nav.home\", data.locale),\r\n        t(\"nav.blog\", data.locale),\r\n        t(\"nav.projects\", data.locale)\r\n      );\r\n    }, 100);\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <div class=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n        <h1 class=\"text-4xl font-bold mb-8 dark:text-white\">\r\n          {t(\"project.title\", data.locale)}\r\n        </h1>\r\n        <p class=\"text-xl text-gray-600 dark:text-gray-300 mb-8\">\r\n          {t(\"project.description\", data.locale)}\r\n        </p>\r\n\r\n        <div class=\"space-y-8\">\r\n          {data.projects.map((project) => (\r\n            <article class=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 border border-gray-100 dark:border-gray-700\">\r\n              <h2 class=\"text-2xl font-bold mb-2\">\r\n                <a\r\n                  href={`/projects/${project.slug}`}\r\n                  class=\"text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors\"\r\n                >\r\n                  {project.title}\r\n                </a>\r\n              </h2>\r\n              <p class=\"text-gray-600 dark:text-gray-300 mb-4\">\r\n                {project.description}\r\n              </p>\r\n              <div class=\"flex flex-wrap gap-2\">\r\n                {project.technologies.map((tag) => (\r\n                  <span class=\"bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-3 py-1 rounded-full text-sm\">\r\n                    {tag}\r\n                  </span>\r\n                ))}\r\n              </div>\r\n            </article>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n",
    "content": "import { Handlers, PageProps } from \"$fresh/server.ts\";\r\nimport Layout from \"../../components/Layout.tsx\";\r\nimport { type Project, getProjects } from \"../../plugins/projects/mod.ts\";\r\nimport {\r\n  t,\r\n  currentLocale,\r\n  type Locale,\r\n  i18nPlugin,\r\n} from \"../../plugins/i18n/mod.ts\";\r\n\r\ninterface ProjectsPageData {\r\n  projects: Project[];\r\n  locale: string;\r\n  translations: Record<string, Record<string, string>>;\r\n}\r\n\r\nexport const handler: Handlers = {\r\n  async GET(req: Request, ctx) {\r\n    // 从URL获取语言参数\r\n    const url = new URL(req.url);\r\n    const langParam = url.searchParams.get(\"lang\");\r\n    const locale =\r\n      langParam === \"zh-CN\" || langParam === \"en-US\"\r\n        ? (langParam as Locale)\r\n        : (\"en-US\" as Locale);\r\n\r\n    // 设置当前语言\r\n    currentLocale.value = locale;\r\n\r\n    // 确保i18n插件激活并加载翻译\r\n    if (!i18nPlugin.isActive) {\r\n      await i18nPlugin.activate();\r\n    }\r\n\r\n    // 等待翻译加载完成\r\n    await i18nPlugin.forceLoadLanguage(locale);\r\n\r\n    // 获取项目列表\r\n    const projects = await getProjects();\r\n\r\n    // 获取当前语言的翻译数据\r\n    const translations = i18nPlugin.getTranslations();\r\n\r\n    // 返回带有翻译数据的上下文\r\n    return ctx.render({\r\n      projects,\r\n      locale,\r\n      translations,\r\n    });\r\n  },\r\n};\r\n\r\nexport default function Projects({ data }: PageProps<ProjectsPageData>) {\r\n  // 将翻译数据注入全局对象\r\n  if (typeof window !== \"undefined\" && data.translations) {\r\n    console.log(\r\n      \"Projects页面: 将翻译数据注入到全局对象\",\r\n      Object.keys(data.translations).length,\r\n      \"个语言\"\r\n    );\r\n    window.__translations = data.translations;\r\n\r\n    // 测试全局翻译功能\r\n    setTimeout(() => {\r\n      console.log(\r\n        \"Projects页面翻译测试:\",\r\n        t(\"nav.home\", data.locale),\r\n        t(\"nav.blog\", data.locale),\r\n        t(\"nav.projects\", data.locale)\r\n      );\r\n    }, 100);\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <div class=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n        <h1 class=\"text-4xl font-bold mb-8 dark:text-white\">\r\n          {t(\"project.title\", data.locale)}\r\n        </h1>\r\n        <p class=\"text-xl text-gray-600 dark:text-gray-300 mb-8\">\r\n          {t(\"project.description\", data.locale)}\r\n        </p>\r\n\r\n        <div class=\"space-y-8\">\r\n          {data.projects.map((project) => (\r\n            <article class=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 border border-gray-100 dark:border-gray-700\">\r\n              <h2 class=\"text-2xl font-bold mb-2\">\r\n                <a\r\n                  href={`/projects/${project.slug}`}\r\n                  class=\"text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors\"\r\n                >\r\n                  {project.title}\r\n                </a>\r\n              </h2>\r\n              <p class=\"text-gray-600 dark:text-gray-300 mb-4\">\r\n                {project.description}\r\n              </p>\r\n              <div class=\"flex flex-wrap gap-2\">\r\n                {project.technologies.map((tag) => (\r\n                  <span class=\"bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-3 py-1 rounded-full text-sm\">\r\n                    {tag}\r\n                  </span>\r\n                ))}\r\n              </div>\r\n            </article>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n",
    "tags": []
  },
  {
    "id": "docs/blog/i18n-guide.md",
    "title": "FreshPress 国际化(i18n)完全指南",
    "url": "/blog/i18n-guide",
    "type": "blog",
    "text": "FreshPress 国际化(i18n)完全指南 ---\r\ntitle: FreshPress 国际化(i18n)完全指南\r\nslug: i18n-guide\r\ndate: 2024-04-16\r\nauthor: FreshPress 团队\r\nexcerpt: 学习如何使用 FreshPress 的国际化功能创建多语言静态网站，包含完整的配置和使用教程。\r\ncover: /static/favicon.svg\r\ntags:\r\n  - 教程\r\n  - 国际化\r\n  - i18n\r\n  - 多语言\r\n---\r\n\r\n# FreshPress 国际化(i18n)完全指南\r\n\r\nFreshPress提供了简单易用的国际化(i18n)功能，让您能够轻松创建多语言网站。本指南将详细介绍如何设置和使用这些功能，帮助您构建适用于全球用户的网站。\r\n\r\n## 快速入门\r\n\r\n国际化对于面向不同语言用户的网站至关重要。FreshPress使这个过程变得简单：\r\n\r\n1. 在项目根目录创建一个`translations`文件夹\r\n2. 为每种语言创建一个JSON文件，例如`en-US.json`和`zh-CN.json`\r\n3. 在组件中使用`t`函数来显示翻译文本\r\n\r\n示例代码：\r\n\r\n```jsx\r\nimport { t } from \"../plugins/i18n/mod.ts\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header>\r\n      <h1>{t(\"site.title\")}</h1>\r\n      <p>{t(\"site.description\")}</p>\r\n    </header>\r\n  );\r\n}\r\n```\r\n\r\n## 翻译文件结构\r\n\r\n翻译文件是简单的JSON文件，使用嵌套对象来组织翻译内容：\r\n\r\n```json\r\n{\r\n  \"site\": {\r\n    \"title\": \"My Website\",\r\n    \"description\": \"A description of my website\"\r\n  },\r\n  \"nav\": {\r\n    \"home\": \"Home\",\r\n    \"about\": \"About\"\r\n  }\r\n}\r\n```\r\n\r\n访问这些翻译使用点符号，如`t(\"site.title\")`或`t(\"nav.home\")`。这种结构使翻译内容组织有序，便于维护。\r\n\r\n## 翻译文件位置\r\n\r\nFreshPress会按以下顺序查找翻译文件：\r\n\r\n1. 配置中指定的`translationsDir`目录（默认为`./translations`）\r\n2. 项目根目录下的`translations`文件夹\r\n3. `docs/translations`文件夹\r\n\r\n系统会自动加载找到的所有`.json`翻译文件，无需额外配置。这种灵活性使您可以根据项目需求选择最合适的位置。\r\n\r\n## 添加新语言\r\n\r\n增加网站语言支持非常简单。只需在`translations`目录中添加新的语言文件，就会自动被检测并添加到可用语言列表中。例如，添加`fr-FR.json`文件会自动启用法语支持。\r\n\r\n您可以根据需要添加任意数量的语言，FreshPress会自动处理加载和切换逻辑。\r\n\r\n## 在组件中使用\r\n\r\n### 基本用法\r\n\r\n在React/Preact组件中使用翻译非常简单：\r\n\r\n```jsx\r\nimport { t } from \"../plugins/i18n/mod.ts\";\r\n\r\n// 简单翻译\r\n<p>{t(\"common.hello\")}</p>\r\n\r\n// 带参数的翻译\r\n<p>{t(\"common.welcome\", { name: \"John\" })}</p>\r\n```\r\n\r\n参数替换让您的翻译更加灵活，特别是对于需要插入动态内容的句子。\r\n\r\n### 切换语言\r\n\r\nFreshPress提供了一个内置的语言切换功能：\r\n\r\n```jsx\r\nimport { toggleLocale, currentLocale } from \"../plugins/i18n/mod.ts\";\r\n\r\n// 显示当前语言\r\n<span>{currentLocale.value}</span>\r\n\r\n// 切换语言按钮\r\n<button onClick={toggleLocale}>\r\n  {currentLocale.value === \"en-US\" ? \"中文\" : \"English\"}\r\n</button>\r\n```\r\n\r\n使用`currentLocale.value`可以响应式地获取当前语言，并在语言切换时自动更新UI。\r\n\r\n### 格式化日期和数字\r\n\r\n根据用户语言格式化日期和数字也是国际化的重要部分：\r\n\r\n```jsx\r\nimport { formatDate } from \"../plugins/i18n/mod.ts\";\r\n\r\n// 根据当前语言格式化日期\r\n<span>{formatDate(new Date(), { dateStyle: \"full\" })}</span>\r\n```\r\n\r\n这确保日期、数字和货币按照当地习惯显示，提升用户体验。\r\n\r\n## 高级配置\r\n\r\n如果需要更多控制，可以创建自己的i18n插件实例：\r\n\r\n```ts\r\nimport { I18nPlugin } from \"../plugins/i18n/mod.ts\";\r\n\r\nconst myI18n = new I18nPlugin({\r\n  defaultLocale: \"fr-FR\",\r\n  locales: [\"fr-FR\", \"en-US\", \"de-DE\"],\r\n  translationsDir: \"./my-translations\",\r\n  fallback: true,\r\n  fallbackLocale: \"en-US\"\r\n});\r\n\r\nawait myI18n.activate();\r\n```\r\n\r\n自定义配置适用于有特殊需求的项目，如需要从非标准位置加载翻译或使用不同的语言切换策略。\r\n\r\n## 最佳实践\r\n\r\n根据我们的经验，以下是一些有效的i18n最佳实践：\r\n\r\n1. **组织良好的键名结构** - 使用有层次的键名，如`section.subsection.element`\r\n2. **功能性分割** - 对于大型项目，按功能区域分割翻译文件\r\n3. **保持一致性** - 确保所有语言文件包含相同的键，避免缺失翻译\r\n4. **使用参数** - 使用参数而不是字符串拼接，便于根据语言调整词序\r\n5. **格式化函数** - 为日期、数字和货币使用格式化函数，适应不同地区的显示习惯\r\n\r\n## 故障排除\r\n\r\n如果翻译未正确显示，请检查以下几点：\r\n\r\n1. 浏览器控制台中是否有相关错误\r\n2. 翻译文件格式是否正确（有效的JSON）\r\n3. 使用的键名是否与翻译文件中的键名完全匹配\r\n4. 翻译文件是否被正确加载（查看控制台日志）\r\n\r\n## 结语\r\n\r\n通过FreshPress的i18n功能，您可以轻松创建多语言网站，触及全球受众。此系统设计简单直观，同时又足够灵活，可以满足各种复杂的国际化需求。\r\n\r\n开始使用FreshPress的i18n功能，让您的网站说世界语言！ ",
    "content": "---\r\ntitle: FreshPress 国际化(i18n)完全指南\r\nslug: i18n-guide\r\ndate: 2024-04-16\r\nauthor: FreshPress 团队\r\nexcerpt: 学习如何使用 FreshPress 的国际化功能创建多语言静态网站，包含完整的配置和使用教程。\r\ncover: /static/favicon.svg\r\ntags:\r\n  - 教程\r\n  - 国际化\r\n  - i18n\r\n  - 多语言\r\n---\r\n\r\n# FreshPress 国际化(i18n)完全指南\r\n\r\nFreshPress提供了简单易用的国际化(i18n)功能，让您能够轻松创建多语言网站。本指南将详细介绍如何设置和使用这些功能，帮助您构建适用于全球用户的网站。\r\n\r\n## 快速入门\r\n\r\n国际化对于面向不同语言用户的网站至关重要。FreshPress使这个过程变得简单：\r\n\r\n1. 在项目根目录创建一个`translations`文件夹\r\n2. 为每种语言创建一个JSON文件，例如`en-US.json`和`zh-CN.json`\r\n3. 在组件中使用`t`函数来显示翻译文本\r\n\r\n示例代码：\r\n\r\n```jsx\r\nimport { t } from \"../plugins/i18n/mod.ts\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header>\r\n      <h1>{t(\"site.title\")}</h1>\r\n      <p>{t(\"site.description\")}</p>\r\n    </header>\r\n  );\r\n}\r\n```\r\n\r\n## 翻译文件结构\r\n\r\n翻译文件是简单的JSON文件，使用嵌套对象来组织翻译内容：\r\n\r\n```json\r\n{\r\n  \"site\": {\r\n    \"title\": \"My Website\",\r\n    \"description\": \"A description of my website\"\r\n  },\r\n  \"nav\": {\r\n    \"home\": \"Home\",\r\n    \"about\": \"About\"\r\n  }\r\n}\r\n```\r\n\r\n访问这些翻译使用点符号，如`t(\"site.title\")`或`t(\"nav.home\")`。这种结构使翻译内容组织有序，便于维护。\r\n\r\n## 翻译文件位置\r\n\r\nFreshPress会按以下顺序查找翻译文件：\r\n\r\n1. 配置中指定的`translationsDir`目录（默认为`./translations`）\r\n2. 项目根目录下的`translations`文件夹\r\n3. `docs/translations`文件夹\r\n\r\n系统会自动加载找到的所有`.json`翻译文件，无需额外配置。这种灵活性使您可以根据项目需求选择最合适的位置。\r\n\r\n## 添加新语言\r\n\r\n增加网站语言支持非常简单。只需在`translations`目录中添加新的语言文件，就会自动被检测并添加到可用语言列表中。例如，添加`fr-FR.json`文件会自动启用法语支持。\r\n\r\n您可以根据需要添加任意数量的语言，FreshPress会自动处理加载和切换逻辑。\r\n\r\n## 在组件中使用\r\n\r\n### 基本用法\r\n\r\n在React/Preact组件中使用翻译非常简单：\r\n\r\n```jsx\r\nimport { t } from \"../plugins/i18n/mod.ts\";\r\n\r\n// 简单翻译\r\n<p>{t(\"common.hello\")}</p>\r\n\r\n// 带参数的翻译\r\n<p>{t(\"common.welcome\", { name: \"John\" })}</p>\r\n```\r\n\r\n参数替换让您的翻译更加灵活，特别是对于需要插入动态内容的句子。\r\n\r\n### 切换语言\r\n\r\nFreshPress提供了一个内置的语言切换功能：\r\n\r\n```jsx\r\nimport { toggleLocale, currentLocale } from \"../plugins/i18n/mod.ts\";\r\n\r\n// 显示当前语言\r\n<span>{currentLocale.value}</span>\r\n\r\n// 切换语言按钮\r\n<button onClick={toggleLocale}>\r\n  {currentLocale.value === \"en-US\" ? \"中文\" : \"English\"}\r\n</button>\r\n```\r\n\r\n使用`currentLocale.value`可以响应式地获取当前语言，并在语言切换时自动更新UI。\r\n\r\n### 格式化日期和数字\r\n\r\n根据用户语言格式化日期和数字也是国际化的重要部分：\r\n\r\n```jsx\r\nimport { formatDate } from \"../plugins/i18n/mod.ts\";\r\n\r\n// 根据当前语言格式化日期\r\n<span>{formatDate(new Date(), { dateStyle: \"full\" })}</span>\r\n```\r\n\r\n这确保日期、数字和货币按照当地习惯显示，提升用户体验。\r\n\r\n## 高级配置\r\n\r\n如果需要更多控制，可以创建自己的i18n插件实例：\r\n\r\n```ts\r\nimport { I18nPlugin } from \"../plugins/i18n/mod.ts\";\r\n\r\nconst myI18n = new I18nPlugin({\r\n  defaultLocale: \"fr-FR\",\r\n  locales: [\"fr-FR\", \"en-US\", \"de-DE\"],\r\n  translationsDir: \"./my-translations\",\r\n  fallback: true,\r\n  fallbackLocale: \"en-US\"\r\n});\r\n\r\nawait myI18n.activate();\r\n```\r\n\r\n自定义配置适用于有特殊需求的项目，如需要从非标准位置加载翻译或使用不同的语言切换策略。\r\n\r\n## 最佳实践\r\n\r\n根据我们的经验，以下是一些有效的i18n最佳实践：\r\n\r\n1. **组织良好的键名结构** - 使用有层次的键名，如`section.subsection.element`\r\n2. **功能性分割** - 对于大型项目，按功能区域分割翻译文件\r\n3. **保持一致性** - 确保所有语言文件包含相同的键，避免缺失翻译\r\n4. **使用参数** - 使用参数而不是字符串拼接，便于根据语言调整词序\r\n5. **格式化函数** - 为日期、数字和货币使用格式化函数，适应不同地区的显示习惯\r\n\r\n## 故障排除\r\n\r\n如果翻译未正确显示，请检查以下几点：\r\n\r\n1. 浏览器控制台中是否有相关错误\r\n2. 翻译文件格式是否正确（有效的JSON）\r\n3. 使用的键名是否与翻译文件中的键名完全匹配\r\n4. 翻译文件是否被正确加载（查看控制台日志）\r\n\r\n## 结语\r\n\r\n通过FreshPress的i18n功能，您可以轻松创建多语言网站，触及全球受众。此系统设计简单直观，同时又足够灵活，可以满足各种复杂的国际化需求。\r\n\r\n开始使用FreshPress的i18n功能，让您的网站说世界语言！ ",
    "tags": []
  },
  {
    "id": "docs/blog/how-to-use-freshpress.md",
    "title": "如何使用 FreshPress 创建现代静态网站",
    "url": "/blog/how-to-use-freshpress",
    "type": "blog",
    "text": "如何使用 FreshPress 创建现代静态网站 ---\r\ntitle: 如何使用 FreshPress 创建现代静态网站\r\ndate: 2024-04-10\r\nauthor: 张三\r\ntags: [FreshPress, 静态网站, Deno, 教程]\r\nexcerpt: 本文介绍了如何发布和使用 FreshPress 框架，从框架发布到用户使用的完整流程。\r\n---\r\n\r\n# 如何使用 FreshPress 创建现代静态网站\r\n\r\n最近我发布了我的新项目 FreshPress，这是一个基于 Deno 和 Fresh 的现代静态网站生成框架。在这篇文章中，我想分享一下如何将这个框架发布出去，以及用户如何使用它来创建自己的网站。\r\n\r\n## 发布框架\r\n\r\n作为框架开发者，我首先需要将 FreshPress 发布到 Deno 的模块注册表。有两种主要方式：\r\n\r\n### 方式一：通过 deno.land/x 发布\r\n\r\n这是最常见的方式，步骤如下：\r\n\r\n1. 将代码推送到 GitHub 仓库\r\n2. 创建版本标签，例如 `v0.3.0`\r\n3. deno.land/x 会自动镜像仓库内容\r\n\r\n用户就可以通过 `https://deno.land/x/freshpress@0.3.0/` 这样的 URL 来使用我的框架了。\r\n\r\n### 方式二：使用 jsr.io\r\n\r\n如果想要更专业的包管理体验，可以使用 JSR：\r\n\r\n```bash\r\ndeno publish\r\n```\r\n\r\n这会将框架发布到 JSR 注册表，用户可以通过 `jsr:@username/freshpress` 这样的导入路径来使用。\r\n\r\n## 用户使用方式\r\n\r\n作为用户，有几种方式可以开始使用 FreshPress：\r\n\r\n### 方式一：使用 create 脚本（推荐）\r\n\r\n最简单的方式是直接运行我提供的创建脚本：\r\n\r\n```bash\r\n# 创建名为 my-site 的新项目\r\ndeno run -A https://deno.land/x/freshpress@0.3.0/scripts/create.ts my-site\r\n\r\n# 或者使用交互式创建\r\ndeno run -A https://deno.land/x/freshpress@0.3.0/scripts/create.ts --interactive\r\n```\r\n\r\n这个脚本会创建一个包含所有必要文件的新项目，包括配置文件、目录结构和一些示例文档。然后就可以：\r\n\r\n```bash\r\n# 进入项目目录\r\ncd my-site\r\n\r\n# 启动开发服务器\r\ndeno task dev\r\n\r\n# 构建静态站点\r\ndeno task build\r\n\r\n# 预览构建结果\r\ndeno task preview\r\n```\r\n\r\n### 方式二：手动创建项目\r\n\r\n对于希望更灵活控制项目的高级用户，可以手动创建项目：\r\n\r\n1. 创建项目目录结构（docs、public 等）\r\n2. 创建 `deno.json` 配置文件和导入映射\r\n3. 创建 `freshpress.config.ts` 配置文件\r\n4. 在 `docs` 目录添加 Markdown 内容\r\n\r\n## 插件和主题扩展\r\n\r\nFreshPress 的一大特色是其可扩展性。用户可以使用我内置的任务来管理插件和主题：\r\n\r\n```bash\r\n# 列出所有可用插件\r\ndeno task plugin:list\r\n\r\n# 添加插件\r\ndeno task plugin:add blog\r\n\r\n# 列出所有可用主题\r\ndeno task theme:list\r\n\r\n# 添加主题\r\ndeno task theme:add minimal\r\n```\r\n\r\n这些命令会自动处理依赖下载和配置更新，让用户专注于内容创作。\r\n\r\n## 配置管理\r\n\r\n为了方便用户管理配置，我还提供了一系列配置相关命令：\r\n\r\n```bash\r\n# 获取特定配置项\r\ndeno task config:get site.title\r\n\r\n# 设置配置项\r\ndeno task config:set site.title \"我的博客\"\r\n\r\n# 列出所有配置\r\ndeno task config:list\r\n```\r\n\r\n## 我的使用体验\r\n\r\n作为 FreshPress 的创建者，我自己也在使用它来构建几个项目。从我的经验来看，这种方式比传统的静态网站生成器有几个明显优势：\r\n\r\n1. **开发体验**：Deno 的现代特性和 Fresh 的快速刷新让开发过程非常流畅\r\n2. **性能**：生成的静态网站非常快，没有大量的客户端 JavaScript\r\n3. **可维护性**：基于插件的架构让功能扩展变得简单\r\n4. **部署简便**：生成的静态文件可以部署到任何静态托管服务\r\n\r\n## 结语\r\n\r\nFreshPress 是我尝试解决静态网站生成过程中常见问题的一个尝试。它结合了现代 Web 技术和最佳实践，为用户提供了一个简单但功能强大的工具。\r\n\r\n如果你正在寻找一个现代的静态网站生成框架，特别是如果你已经熟悉 Deno 和 Fresh，那么 FreshPress 可能正是你需要的解决方案。\r\n\r\n欢迎访问 [FreshPress 文档](https://freshpress.dev) 了解更多信息，或者在 [GitHub](https://github.com/username/freshpress) 上为项目贡献代码。  FreshPress 静态网站 Deno 教程",
    "content": "---\r\ntitle: 如何使用 FreshPress 创建现代静态网站\r\ndate: 2024-04-10\r\nauthor: 张三\r\ntags: [FreshPress, 静态网站, Deno, 教程]\r\nexcerpt: 本文介绍了如何发布和使用 FreshPress 框架，从框架发布到用户使用的完整流程。\r\n---\r\n\r\n# 如何使用 FreshPress 创建现代静态网站\r\n\r\n最近我发布了我的新项目 FreshPress，这是一个基于 Deno 和 Fresh 的现代静态网站生成框架。在这篇文章中，我想分享一下如何将这个框架发布出去，以及用户如何使用它来创建自己的网站。\r\n\r\n## 发布框架\r\n\r\n作为框架开发者，我首先需要将 FreshPress 发布到 Deno 的模块注册表。有两种主要方式：\r\n\r\n### 方式一：通过 deno.land/x 发布\r\n\r\n这是最常见的方式，步骤如下：\r\n\r\n1. 将代码推送到 GitHub 仓库\r\n2. 创建版本标签，例如 `v0.3.0`\r\n3. deno.land/x 会自动镜像仓库内容\r\n\r\n用户就可以通过 `https://deno.land/x/freshpress@0.3.0/` 这样的 URL 来使用我的框架了。\r\n\r\n### 方式二：使用 jsr.io\r\n\r\n如果想要更专业的包管理体验，可以使用 JSR：\r\n\r\n```bash\r\ndeno publish\r\n```\r\n\r\n这会将框架发布到 JSR 注册表，用户可以通过 `jsr:@username/freshpress` 这样的导入路径来使用。\r\n\r\n## 用户使用方式\r\n\r\n作为用户，有几种方式可以开始使用 FreshPress：\r\n\r\n### 方式一：使用 create 脚本（推荐）\r\n\r\n最简单的方式是直接运行我提供的创建脚本：\r\n\r\n```bash\r\n# 创建名为 my-site 的新项目\r\ndeno run -A https://deno.land/x/freshpress@0.3.0/scripts/create.ts my-site\r\n\r\n# 或者使用交互式创建\r\ndeno run -A https://deno.land/x/freshpress@0.3.0/scripts/create.ts --interactive\r\n```\r\n\r\n这个脚本会创建一个包含所有必要文件的新项目，包括配置文件、目录结构和一些示例文档。然后就可以：\r\n\r\n```bash\r\n# 进入项目目录\r\ncd my-site\r\n\r\n# 启动开发服务器\r\ndeno task dev\r\n\r\n# 构建静态站点\r\ndeno task build\r\n\r\n# 预览构建结果\r\ndeno task preview\r\n```\r\n\r\n### 方式二：手动创建项目\r\n\r\n对于希望更灵活控制项目的高级用户，可以手动创建项目：\r\n\r\n1. 创建项目目录结构（docs、public 等）\r\n2. 创建 `deno.json` 配置文件和导入映射\r\n3. 创建 `freshpress.config.ts` 配置文件\r\n4. 在 `docs` 目录添加 Markdown 内容\r\n\r\n## 插件和主题扩展\r\n\r\nFreshPress 的一大特色是其可扩展性。用户可以使用我内置的任务来管理插件和主题：\r\n\r\n```bash\r\n# 列出所有可用插件\r\ndeno task plugin:list\r\n\r\n# 添加插件\r\ndeno task plugin:add blog\r\n\r\n# 列出所有可用主题\r\ndeno task theme:list\r\n\r\n# 添加主题\r\ndeno task theme:add minimal\r\n```\r\n\r\n这些命令会自动处理依赖下载和配置更新，让用户专注于内容创作。\r\n\r\n## 配置管理\r\n\r\n为了方便用户管理配置，我还提供了一系列配置相关命令：\r\n\r\n```bash\r\n# 获取特定配置项\r\ndeno task config:get site.title\r\n\r\n# 设置配置项\r\ndeno task config:set site.title \"我的博客\"\r\n\r\n# 列出所有配置\r\ndeno task config:list\r\n```\r\n\r\n## 我的使用体验\r\n\r\n作为 FreshPress 的创建者，我自己也在使用它来构建几个项目。从我的经验来看，这种方式比传统的静态网站生成器有几个明显优势：\r\n\r\n1. **开发体验**：Deno 的现代特性和 Fresh 的快速刷新让开发过程非常流畅\r\n2. **性能**：生成的静态网站非常快，没有大量的客户端 JavaScript\r\n3. **可维护性**：基于插件的架构让功能扩展变得简单\r\n4. **部署简便**：生成的静态文件可以部署到任何静态托管服务\r\n\r\n## 结语\r\n\r\nFreshPress 是我尝试解决静态网站生成过程中常见问题的一个尝试。它结合了现代 Web 技术和最佳实践，为用户提供了一个简单但功能强大的工具。\r\n\r\n如果你正在寻找一个现代的静态网站生成框架，特别是如果你已经熟悉 Deno 和 Fresh，那么 FreshPress 可能正是你需要的解决方案。\r\n\r\n欢迎访问 [FreshPress 文档](https://freshpress.dev) 了解更多信息，或者在 [GitHub](https://github.com/username/freshpress) 上为项目贡献代码。 ",
    "tags": [
      "FreshPress",
      "静态网站",
      "Deno",
      "教程"
    ]
  },
  {
    "id": "docs/blog/getting-started.md",
    "title": "使用 FreshPress 开始你的静态网站之旅",
    "url": "/blog/getting-started",
    "type": "blog",
    "text": "使用 FreshPress 开始你的静态网站之旅 ---\r\ntitle: 使用 FreshPress 开始你的静态网站之旅\r\nslug: getting-started\r\ndate: 2024-04-10\r\nauthor: zhizheng\r\nexcerpt: 了解如何使用 FreshPress 快速搭建现代化静态网站，从安装到发布，全面指南。\r\ncover: /static/favicon.svg\r\ntags:\r\n  - 教程\r\n  - 入门\r\n  - Deno\r\n---\r\n\r\n# 使用 FreshPress 开始你的静态网站之旅\r\n\r\nFreshPress 是一个现代化的静态网站生成器，基于 Deno 和 Fresh 框架构建。它提供了简单直观的 API，让你可以快速搭建高性能的静态网站。本文将带你了解如何安装 FreshPress 并创建你的第一个网站。\r\n\r\n## 前置条件\r\n\r\n在开始之前，请确保你的系统中已安装 Deno 运行时。如果没有，可以通过以下命令安装：\r\n\r\n```bash\r\n# Windows (PowerShell)\r\nirm https://deno.land/install.ps1 | iex\r\n\r\n# macOS, Linux\r\ncurl -fsSL https://deno.land/x/install/install.sh | sh\r\n```\r\n\r\n## 安装 FreshPress\r\n\r\n使用以下命令创建一个新的 FreshPress 项目：\r\n\r\n```bash\r\ndeno run -A --unstable-sloppy-imports https://freshpress.deno.dev/create.ts my-website\r\ncd my-website\r\n```\r\n\r\n## 目录结构\r\n\r\n创建项目后，你会看到以下目录结构：\r\n\r\n```\r\nmy-website/\r\n├── components/      # 可复用的组件\r\n├── data/            # 网站数据（博客文章、项目等）\r\n├── islands/         # 客户端交互组件\r\n├── plugins/         # 插件目录\r\n├── routes/          # 页面路由\r\n├── static/          # 静态资源\r\n├── themes/          # 主题目录\r\n├── deno.json        # Deno 配置\r\n└── import_map.json  # 导入映射\r\n```\r\n\r\n## 开发服务器\r\n\r\n运行以下命令启动开发服务器：\r\n\r\n```bash\r\ndeno task dev\r\n```\r\n\r\n然后在浏览器中打开 http://localhost:8000 即可看到你的网站。\r\n\r\n## 添加内容\r\n\r\n### 创建博客文章\r\n\r\n在 `data/blog` 目录下创建 Markdown 文件，例如 `my-first-post.md`：\r\n\r\n```markdown\r\n---\r\ntitle: 我的第一篇博客\r\nslug: my-first-post\r\ndate: 2024-04-10\r\nauthor: 你的名字\r\nexcerpt: 这是我使用 FreshPress 创建的第一篇博客文章。\r\ncover: /images/blog/my-post.jpg\r\ntags:\r\n  - 博客\r\n  - 示例\r\n---\r\n\r\n# 我的第一篇博客\r\n\r\n这是正文内容...\r\n```\r\n\r\n### 创建项目展示\r\n\r\n在 `data/projects` 目录下创建 JSON 文件，例如 `my-project.json`：\r\n\r\n```json\r\n{\r\n  \"id\": \"my-project\",\r\n  \"slug\": \"my-project\",\r\n  \"title\": \"我的项目\",\r\n  \"description\": \"这是我的示例项目描述\",\r\n  \"image\": \"/images/projects/my-project.jpg\",\r\n  \"githubUrl\": \"https://github.com/yourusername/my-project\",\r\n  \"demoUrl\": \"https://my-project-demo.com\",\r\n  \"technologies\": [\"Deno\", \"TypeScript\", \"Fresh\"],\r\n  \"features\": [\"响应式设计\", \"高性能\", \"易于使用\"],\r\n  \"longDescription\": \"这里是项目的详细描述...\"\r\n}\r\n```\r\n\r\n## 构建静态网站\r\n\r\n当你准备部署时，使用以下命令构建静态网站：\r\n\r\n```bash\r\ndeno task build\r\n```\r\n\r\n构建完成后，所有静态文件都会生成在 `_site` 目录中。\r\n\r\n## 部署\r\n\r\n你可以将生成的 `_site` 目录部署到任何静态网站托管服务，如 Netlify、Vercel、GitHub Pages 等。\r\n\r\n例如，使用 Deno Deploy 部署：\r\n\r\n```bash\r\ndeno task deploy\r\n```\r\n\r\n## 结论\r\n\r\n使用 FreshPress，你可以快速搭建现代化的静态网站，专注于内容创作而不是复杂的配置。通过插件系统，你还可以轻松扩展网站功能，满足各种需求。\r\n\r\n如果你有任何问题或建议，请访问我们的 [GitHub 仓库](https://github.com/freshpress/freshpress)。\r\n\r\n祝你使用愉快！ ",
    "content": "---\r\ntitle: 使用 FreshPress 开始你的静态网站之旅\r\nslug: getting-started\r\ndate: 2024-04-10\r\nauthor: zhizheng\r\nexcerpt: 了解如何使用 FreshPress 快速搭建现代化静态网站，从安装到发布，全面指南。\r\ncover: /static/favicon.svg\r\ntags:\r\n  - 教程\r\n  - 入门\r\n  - Deno\r\n---\r\n\r\n# 使用 FreshPress 开始你的静态网站之旅\r\n\r\nFreshPress 是一个现代化的静态网站生成器，基于 Deno 和 Fresh 框架构建。它提供了简单直观的 API，让你可以快速搭建高性能的静态网站。本文将带你了解如何安装 FreshPress 并创建你的第一个网站。\r\n\r\n## 前置条件\r\n\r\n在开始之前，请确保你的系统中已安装 Deno 运行时。如果没有，可以通过以下命令安装：\r\n\r\n```bash\r\n# Windows (PowerShell)\r\nirm https://deno.land/install.ps1 | iex\r\n\r\n# macOS, Linux\r\ncurl -fsSL https://deno.land/x/install/install.sh | sh\r\n```\r\n\r\n## 安装 FreshPress\r\n\r\n使用以下命令创建一个新的 FreshPress 项目：\r\n\r\n```bash\r\ndeno run -A --unstable-sloppy-imports https://freshpress.deno.dev/create.ts my-website\r\ncd my-website\r\n```\r\n\r\n## 目录结构\r\n\r\n创建项目后，你会看到以下目录结构：\r\n\r\n```\r\nmy-website/\r\n├── components/      # 可复用的组件\r\n├── data/            # 网站数据（博客文章、项目等）\r\n├── islands/         # 客户端交互组件\r\n├── plugins/         # 插件目录\r\n├── routes/          # 页面路由\r\n├── static/          # 静态资源\r\n├── themes/          # 主题目录\r\n├── deno.json        # Deno 配置\r\n└── import_map.json  # 导入映射\r\n```\r\n\r\n## 开发服务器\r\n\r\n运行以下命令启动开发服务器：\r\n\r\n```bash\r\ndeno task dev\r\n```\r\n\r\n然后在浏览器中打开 http://localhost:8000 即可看到你的网站。\r\n\r\n## 添加内容\r\n\r\n### 创建博客文章\r\n\r\n在 `data/blog` 目录下创建 Markdown 文件，例如 `my-first-post.md`：\r\n\r\n```markdown\r\n---\r\ntitle: 我的第一篇博客\r\nslug: my-first-post\r\ndate: 2024-04-10\r\nauthor: 你的名字\r\nexcerpt: 这是我使用 FreshPress 创建的第一篇博客文章。\r\ncover: /images/blog/my-post.jpg\r\ntags:\r\n  - 博客\r\n  - 示例\r\n---\r\n\r\n# 我的第一篇博客\r\n\r\n这是正文内容...\r\n```\r\n\r\n### 创建项目展示\r\n\r\n在 `data/projects` 目录下创建 JSON 文件，例如 `my-project.json`：\r\n\r\n```json\r\n{\r\n  \"id\": \"my-project\",\r\n  \"slug\": \"my-project\",\r\n  \"title\": \"我的项目\",\r\n  \"description\": \"这是我的示例项目描述\",\r\n  \"image\": \"/images/projects/my-project.jpg\",\r\n  \"githubUrl\": \"https://github.com/yourusername/my-project\",\r\n  \"demoUrl\": \"https://my-project-demo.com\",\r\n  \"technologies\": [\"Deno\", \"TypeScript\", \"Fresh\"],\r\n  \"features\": [\"响应式设计\", \"高性能\", \"易于使用\"],\r\n  \"longDescription\": \"这里是项目的详细描述...\"\r\n}\r\n```\r\n\r\n## 构建静态网站\r\n\r\n当你准备部署时，使用以下命令构建静态网站：\r\n\r\n```bash\r\ndeno task build\r\n```\r\n\r\n构建完成后，所有静态文件都会生成在 `_site` 目录中。\r\n\r\n## 部署\r\n\r\n你可以将生成的 `_site` 目录部署到任何静态网站托管服务，如 Netlify、Vercel、GitHub Pages 等。\r\n\r\n例如，使用 Deno Deploy 部署：\r\n\r\n```bash\r\ndeno task deploy\r\n```\r\n\r\n## 结论\r\n\r\n使用 FreshPress，你可以快速搭建现代化的静态网站，专注于内容创作而不是复杂的配置。通过插件系统，你还可以轻松扩展网站功能，满足各种需求。\r\n\r\n如果你有任何问题或建议，请访问我们的 [GitHub 仓库](https://github.com/freshpress/freshpress)。\r\n\r\n祝你使用愉快！ ",
    "tags": []
  },
  {
    "id": "docs/blog/preload-system.md",
    "title": "FreshPress预加载系统：提升网站启动效率的关键",
    "url": "/blog/preload-system",
    "type": "blog",
    "text": "FreshPress预加载系统：提升网站启动效率的关键 ---\r\ntitle: FreshPress预加载系统：提升网站启动效率的关键\r\nauthor: FreshPress团队\r\ndate: 2023-12-15\r\ntags: \r\n  - 技术\r\n  - FreshPress\r\n  - 优化\r\n  - 预加载\r\n---\r\n\r\n# FreshPress预加载系统：提升网站启动效率的关键\r\n\r\n在现代Web开发中，用户体验至关重要。网站的启动速度、资源加载效率以及初始渲染时间都直接影响着用户的第一印象。为了解决这些问题，我们在FreshPress中引入了一个统一的预加载调度系统，它作为一个中央调度空间，按顺序执行所有必要的预加载任务。\r\n\r\n## 什么是预加载系统？\r\n\r\nFreshPress预加载系统是一个轻量级的任务调度器，它不重新实现功能，而是按顺序调用现有的独立任务脚本，确保所有必要的系统准备工作在开发服务器启动或网站构建之前完成。这个调度器保留了各个功能模块的独立性，同时提供了一个统一的执行入口。\r\n\r\n## 预加载系统解决了什么问题？\r\n\r\n在引入统一预加载系统之前，我们需要手动执行多个独立的命令来完成初始化工作：\r\n\r\n```bash\r\ndeno task gen-config   # 生成客户端配置\r\ndeno task init         # 初始化目录结构\r\ndeno task search:index # 构建搜索索引\r\n```\r\n\r\n这种方式存在几个明显问题：\r\n\r\n1. **繁琐的操作流程**：开发者需要记住并依次执行多个命令\r\n2. **容易出错**：任何一步遗漏都可能导致功能异常\r\n3. **时间消耗**：单独执行每个任务会产生额外的启动开销\r\n4. **缺乏整体性**：各子系统之间缺乏协调，可能导致不一致\r\n\r\n## 预加载系统的工作原理\r\n\r\n新的预加载系统作为一个中央调度器，按顺序执行以下关键任务：\r\n\r\n### 1. 初始化目录结构（init任务）\r\n\r\n`init`任务负责创建并确保FreshPress所需的关键目录结构存在。具体功能包括：\r\n\r\n- 创建必要的目录结构，如`docs/blog`、`docs/projects`和`docs/translations`等\r\n- 检查并生成默认的翻译文件（如`en-US.json`和`zh-CN.json`），包含网站导航、搜索功能等基本翻译键值\r\n- 确保网站内容和资源的存储位置正确配置，为后续内容管理做准备\r\n- 自动检测缺失的目录并创建，避免因目录结构问题导致的运行时错误\r\n\r\n这一步确保了网站的基础框架完整，所有内容和资源都有适当的存储位置。如果是首次运行，它还会自动生成必要的默认文件，使站点立即可用。\r\n\r\n### 2. 生成客户端配置（gen-config任务）\r\n\r\n`gen-config`任务专注于处理站点配置并生成客户端可用的配置文件。主要功能包括：\r\n\r\n- 读取并解析`freshpress.config.ts`文件，提取站点基本信息（标题、描述、语言等）\r\n- 识别并处理已启用的插件列表，确保UI能正确显示对应功能\r\n- 生成`static/fp-config.js`文件，包含客户端可直接使用的全局配置对象\r\n- 通过全局变量（如`window.__fp_config`和`window.__enabledPlugins`）使配置信息在浏览器环境中可用\r\n- 将配置存入localStorage，支持离线访问和页面间共享\r\n\r\n这一步使得服务器端的配置信息能够无缝传递到客户端，确保整个应用的一致性。导航栏、搜索功能、国际化支持等组件可以根据配置动态显示或隐藏，提供定制化的用户体验。\r\n\r\n### 3. 构建搜索索引（search:index任务）\r\n\r\n`search:index`任务负责构建站点的全文搜索功能。其核心功能包括：\r\n\r\n- 初始化搜索插件，配置索引存储路径、搜索结果高亮和权重等参数\r\n- 扫描和索引站点内容，包括博客文章、项目描述、简历信息和静态页面\r\n- 为不同类型的内容设置不同的权重（如标题权重高于正文）\r\n- 构建优化的搜索索引结构，支持快速全文检索\r\n- 添加手动定义的关键内容，确保重要页面在搜索结果中有适当的展示\r\n- 生成`docs/search-index.json`文件，存储完整的检索数据\r\n\r\n这一步为站点提供了强大的搜索能力，使用户能够快速找到他们需要的信息，大幅提升用户体验和内容可访问性。\r\n\r\n## 如何使用预加载系统\r\n\r\n得益于与FreshPress任务系统的集成，使用预加载系统非常简单。开发者只需执行：\r\n\r\n```bash\r\ndeno task preload\r\n```\r\n\r\n或者，更常见的情况是，预加载会在启动开发服务器或构建网站时自动运行：\r\n\r\n```bash\r\ndeno task dev    # 自动包含预加载步骤\r\ndeno task build  # 自动包含预加载步骤\r\n```\r\n\r\n## 预加载系统的技术实现\r\n\r\n预加载系统的核心是一个简单但高效的任务调度器，它的实现非常轻量：\r\n\r\n```typescript\r\nasync function preload() {\r\n  try {\r\n    // 1. 初始化目录结构\r\n    const initResult = await runTask(\"init\");\r\n    \r\n    // 2. 生成客户端配置\r\n    const configResult = await runTask(\"gen-config\");\r\n    \r\n    // 3. 构建搜索索引\r\n    const indexResult = await runTask(\"search:index\");\r\n    \r\n    // 返回整体执行结果\r\n    return initResult && configResult && indexResult;\r\n  } catch (error) {\r\n    console.error(\"❌ 预加载过程中发生错误:\", error);\r\n    return false;\r\n  }\r\n}\r\n```\r\n\r\n这种设计有几个明显优势：\r\n\r\n1. **模块化**：每个任务保持独立，可以单独维护和更新\r\n2. **可扩展**：轻松添加新的预加载任务而不影响现有功能\r\n3. **可靠性**：一个任务的失败不会导致整个系统崩溃\r\n4. **可视化**：清晰的执行流程和状态报告\r\n\r\n## 性能提升与效果\r\n\r\n引入统一预加载系统后，我们观察到了显著的改进：\r\n\r\n- **启动时间优化**：通过统一调度，避免了多次脚本启动的开销\r\n- **错误率降低**：由于自动化程度提高，配置错误和遗漏问题大幅减少\r\n- **开发体验改善**：开发者不再需要记住和执行多个命令，工作流更加顺畅\r\n- **一致性保证**：所有子系统按照确定的顺序初始化，避免依赖问题\r\n\r\n## 未来展望\r\n\r\n预加载系统作为FreshPress框架的基础设施，将继续发展和完善。未来的改进方向包括：\r\n\r\n- 支持按需执行特定预加载任务，提供更灵活的选项\r\n- 添加并行执行无依赖任务的能力，进一步提升性能\r\n- 集成更多插件的预处理流程，使第三方插件能够无缝接入预加载系统\r\n- 提供更详细的诊断信息和性能指标，帮助开发者优化网站\r\n\r\n## 结论\r\n\r\nFreshPress的统一预加载系统代表了我们对开发体验和性能优化的不懈追求。通过提供一个中央调度空间来执行所有必要的预加载任务，我们为开发者提供了更加顺畅的工作流程，也为最终用户带来了更加流畅的网站体验。\r\n\r\n无论您是刚刚开始使用FreshPress，还是正在寻求优化现有项目，预加载系统都将成为提升您网站性能的关键工具。 ",
    "content": "---\r\ntitle: FreshPress预加载系统：提升网站启动效率的关键\r\nauthor: FreshPress团队\r\ndate: 2023-12-15\r\ntags: \r\n  - 技术\r\n  - FreshPress\r\n  - 优化\r\n  - 预加载\r\n---\r\n\r\n# FreshPress预加载系统：提升网站启动效率的关键\r\n\r\n在现代Web开发中，用户体验至关重要。网站的启动速度、资源加载效率以及初始渲染时间都直接影响着用户的第一印象。为了解决这些问题，我们在FreshPress中引入了一个统一的预加载调度系统，它作为一个中央调度空间，按顺序执行所有必要的预加载任务。\r\n\r\n## 什么是预加载系统？\r\n\r\nFreshPress预加载系统是一个轻量级的任务调度器，它不重新实现功能，而是按顺序调用现有的独立任务脚本，确保所有必要的系统准备工作在开发服务器启动或网站构建之前完成。这个调度器保留了各个功能模块的独立性，同时提供了一个统一的执行入口。\r\n\r\n## 预加载系统解决了什么问题？\r\n\r\n在引入统一预加载系统之前，我们需要手动执行多个独立的命令来完成初始化工作：\r\n\r\n```bash\r\ndeno task gen-config   # 生成客户端配置\r\ndeno task init         # 初始化目录结构\r\ndeno task search:index # 构建搜索索引\r\n```\r\n\r\n这种方式存在几个明显问题：\r\n\r\n1. **繁琐的操作流程**：开发者需要记住并依次执行多个命令\r\n2. **容易出错**：任何一步遗漏都可能导致功能异常\r\n3. **时间消耗**：单独执行每个任务会产生额外的启动开销\r\n4. **缺乏整体性**：各子系统之间缺乏协调，可能导致不一致\r\n\r\n## 预加载系统的工作原理\r\n\r\n新的预加载系统作为一个中央调度器，按顺序执行以下关键任务：\r\n\r\n### 1. 初始化目录结构（init任务）\r\n\r\n`init`任务负责创建并确保FreshPress所需的关键目录结构存在。具体功能包括：\r\n\r\n- 创建必要的目录结构，如`docs/blog`、`docs/projects`和`docs/translations`等\r\n- 检查并生成默认的翻译文件（如`en-US.json`和`zh-CN.json`），包含网站导航、搜索功能等基本翻译键值\r\n- 确保网站内容和资源的存储位置正确配置，为后续内容管理做准备\r\n- 自动检测缺失的目录并创建，避免因目录结构问题导致的运行时错误\r\n\r\n这一步确保了网站的基础框架完整，所有内容和资源都有适当的存储位置。如果是首次运行，它还会自动生成必要的默认文件，使站点立即可用。\r\n\r\n### 2. 生成客户端配置（gen-config任务）\r\n\r\n`gen-config`任务专注于处理站点配置并生成客户端可用的配置文件。主要功能包括：\r\n\r\n- 读取并解析`freshpress.config.ts`文件，提取站点基本信息（标题、描述、语言等）\r\n- 识别并处理已启用的插件列表，确保UI能正确显示对应功能\r\n- 生成`static/fp-config.js`文件，包含客户端可直接使用的全局配置对象\r\n- 通过全局变量（如`window.__fp_config`和`window.__enabledPlugins`）使配置信息在浏览器环境中可用\r\n- 将配置存入localStorage，支持离线访问和页面间共享\r\n\r\n这一步使得服务器端的配置信息能够无缝传递到客户端，确保整个应用的一致性。导航栏、搜索功能、国际化支持等组件可以根据配置动态显示或隐藏，提供定制化的用户体验。\r\n\r\n### 3. 构建搜索索引（search:index任务）\r\n\r\n`search:index`任务负责构建站点的全文搜索功能。其核心功能包括：\r\n\r\n- 初始化搜索插件，配置索引存储路径、搜索结果高亮和权重等参数\r\n- 扫描和索引站点内容，包括博客文章、项目描述、简历信息和静态页面\r\n- 为不同类型的内容设置不同的权重（如标题权重高于正文）\r\n- 构建优化的搜索索引结构，支持快速全文检索\r\n- 添加手动定义的关键内容，确保重要页面在搜索结果中有适当的展示\r\n- 生成`docs/search-index.json`文件，存储完整的检索数据\r\n\r\n这一步为站点提供了强大的搜索能力，使用户能够快速找到他们需要的信息，大幅提升用户体验和内容可访问性。\r\n\r\n## 如何使用预加载系统\r\n\r\n得益于与FreshPress任务系统的集成，使用预加载系统非常简单。开发者只需执行：\r\n\r\n```bash\r\ndeno task preload\r\n```\r\n\r\n或者，更常见的情况是，预加载会在启动开发服务器或构建网站时自动运行：\r\n\r\n```bash\r\ndeno task dev    # 自动包含预加载步骤\r\ndeno task build  # 自动包含预加载步骤\r\n```\r\n\r\n## 预加载系统的技术实现\r\n\r\n预加载系统的核心是一个简单但高效的任务调度器，它的实现非常轻量：\r\n\r\n```typescript\r\nasync function preload() {\r\n  try {\r\n    // 1. 初始化目录结构\r\n    const initResult = await runTask(\"init\");\r\n    \r\n    // 2. 生成客户端配置\r\n    const configResult = await runTask(\"gen-config\");\r\n    \r\n    // 3. 构建搜索索引\r\n    const indexResult = await runTask(\"search:index\");\r\n    \r\n    // 返回整体执行结果\r\n    return initResult && configResult && indexResult;\r\n  } catch (error) {\r\n    console.error(\"❌ 预加载过程中发生错误:\", error);\r\n    return false;\r\n  }\r\n}\r\n```\r\n\r\n这种设计有几个明显优势：\r\n\r\n1. **模块化**：每个任务保持独立，可以单独维护和更新\r\n2. **可扩展**：轻松添加新的预加载任务而不影响现有功能\r\n3. **可靠性**：一个任务的失败不会导致整个系统崩溃\r\n4. **可视化**：清晰的执行流程和状态报告\r\n\r\n## 性能提升与效果\r\n\r\n引入统一预加载系统后，我们观察到了显著的改进：\r\n\r\n- **启动时间优化**：通过统一调度，避免了多次脚本启动的开销\r\n- **错误率降低**：由于自动化程度提高，配置错误和遗漏问题大幅减少\r\n- **开发体验改善**：开发者不再需要记住和执行多个命令，工作流更加顺畅\r\n- **一致性保证**：所有子系统按照确定的顺序初始化，避免依赖问题\r\n\r\n## 未来展望\r\n\r\n预加载系统作为FreshPress框架的基础设施，将继续发展和完善。未来的改进方向包括：\r\n\r\n- 支持按需执行特定预加载任务，提供更灵活的选项\r\n- 添加并行执行无依赖任务的能力，进一步提升性能\r\n- 集成更多插件的预处理流程，使第三方插件能够无缝接入预加载系统\r\n- 提供更详细的诊断信息和性能指标，帮助开发者优化网站\r\n\r\n## 结论\r\n\r\nFreshPress的统一预加载系统代表了我们对开发体验和性能优化的不懈追求。通过提供一个中央调度空间来执行所有必要的预加载任务，我们为开发者提供了更加顺畅的工作流程，也为最终用户带来了更加流畅的网站体验。\r\n\r\n无论您是刚刚开始使用FreshPress，还是正在寻求优化现有项目，预加载系统都将成为提升您网站性能的关键工具。 ",
    "tags": []
  },
  {
    "id": "blog",
    "title": "博客",
    "url": "/blog",
    "type": "page",
    "text": "博客 查看所有博客文章和最新动态，了解我们的技术分享和见解。Fresh框架搭建的现代静态站点。 博客首页 - 使用Fresh框架构建 博客 文章 技术 分享 Fresh",
    "content": "查看所有博客文章和最新动态，了解我们的技术分享和见解。Fresh框架搭建的现代静态站点。",
    "tags": [
      "博客",
      "文章",
      "技术",
      "分享",
      "Fresh"
    ]
  },
  {
    "id": "projects",
    "title": "项目",
    "url": "/projects",
    "type": "page",
    "text": "项目 浏览所有项目作品集，查看我们的开源贡献和创新项目。基于Fresh和Deno构建的现代Web应用。 项目展示页面 - Fresh框架驱动 项目 作品集 开源 案例 Fresh Deno",
    "content": "浏览所有项目作品集，查看我们的开源贡献和创新项目。基于Fresh和Deno构建的现代Web应用。",
    "tags": [
      "项目",
      "作品集",
      "开源",
      "案例",
      "Fresh",
      "Deno"
    ]
  },
  {
    "id": "resume",
    "title": "简历",
    "url": "/resume",
    "type": "page",
    "text": "简历 个人简历，包含工作经历、教育背景、技能和项目经验等详细信息。使用Fresh框架开发的响应式简历页面。 个人简历页面 - 基于Fresh框架 简历 工作 技能 经历 Fresh",
    "content": "个人简历，包含工作经历、教育背景、技能和项目经验等详细信息。使用Fresh框架开发的响应式简历页面。",
    "tags": [
      "简历",
      "工作",
      "技能",
      "经历",
      "Fresh"
    ]
  },
  {
    "id": "freshpress",
    "title": "FreshPress - 基于Fresh的现代静态站点生成器",
    "url": "/",
    "type": "home",
    "text": "FreshPress - 基于Fresh的现代静态站点生成器 FreshPress是一个基于Fresh框架的现代静态站点生成器，专为构建快速、灵活、SEO友好的网站而设计。Fresh是Deno生态系统中的一个轻量级Web框架，提供了零配置、零构建时间的开发体验。FreshPress扩展了Fresh的功能，提供了更多开箱即用的特性，如博客支持、项目展示、国际化、主题系统和插件架构。 FreshPress - 构建在Fresh框架之上的静态站点生成器 FreshPress Fresh Deno 静态站点 框架",
    "content": "FreshPress是一个基于Fresh框架的现代静态站点生成器，专为构建快速、灵活、SEO友好的网站而设计。Fresh是Deno生态系统中的一个轻量级Web框架，提供了零配置、零构建时间的开发体验。FreshPress扩展了Fresh的功能，提供了更多开箱即用的特性，如博客支持、项目展示、国际化、主题系统和插件架构。",
    "tags": [
      "FreshPress",
      "Fresh",
      "Deno",
      "静态站点",
      "框架"
    ]
  }
]